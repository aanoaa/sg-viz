// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Policy is an object representing the database table.
type Policy struct {
	ID       null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	From     int64      `boil:"from" json:"from" toml:"from" yaml:"from"`
	To       int64      `boil:"to" json:"to" toml:"to" yaml:"to"`
	Port     int64      `boil:"port" json:"port" toml:"port" yaml:"port"`
	Protocol string     `boil:"protocol" json:"protocol" toml:"protocol" yaml:"protocol"`
	Desc     string     `boil:"desc" json:"desc" toml:"desc" yaml:"desc"`

	R *policyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L policyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PolicyColumns = struct {
	ID       string
	From     string
	To       string
	Port     string
	Protocol string
	Desc     string
}{
	ID:       "id",
	From:     "from",
	To:       "to",
	Port:     "port",
	Protocol: "protocol",
	Desc:     "desc",
}

var PolicyTableColumns = struct {
	ID       string
	From     string
	To       string
	Port     string
	Protocol string
	Desc     string
}{
	ID:       "policy.id",
	From:     "policy.from",
	To:       "policy.to",
	Port:     "policy.port",
	Protocol: "policy.protocol",
	Desc:     "policy.desc",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var PolicyWhere = struct {
	ID       whereHelpernull_Int64
	From     whereHelperint64
	To       whereHelperint64
	Port     whereHelperint64
	Protocol whereHelperstring
	Desc     whereHelperstring
}{
	ID:       whereHelpernull_Int64{field: "\"policy\".\"id\""},
	From:     whereHelperint64{field: "\"policy\".\"from\""},
	To:       whereHelperint64{field: "\"policy\".\"to\""},
	Port:     whereHelperint64{field: "\"policy\".\"port\""},
	Protocol: whereHelperstring{field: "\"policy\".\"protocol\""},
	Desc:     whereHelperstring{field: "\"policy\".\"desc\""},
}

// PolicyRels is where relationship names are stored.
var PolicyRels = struct {
	ToSgroup   string
	FromSgroup string
}{
	ToSgroup:   "ToSgroup",
	FromSgroup: "FromSgroup",
}

// policyR is where relationships are stored.
type policyR struct {
	ToSgroup   *Sgroup `boil:"ToSgroup" json:"ToSgroup" toml:"ToSgroup" yaml:"ToSgroup"`
	FromSgroup *Sgroup `boil:"FromSgroup" json:"FromSgroup" toml:"FromSgroup" yaml:"FromSgroup"`
}

// NewStruct creates a new relationship struct
func (*policyR) NewStruct() *policyR {
	return &policyR{}
}

func (r *policyR) GetToSgroup() *Sgroup {
	if r == nil {
		return nil
	}
	return r.ToSgroup
}

func (r *policyR) GetFromSgroup() *Sgroup {
	if r == nil {
		return nil
	}
	return r.FromSgroup
}

// policyL is where Load methods for each relationship are stored.
type policyL struct{}

var (
	policyAllColumns            = []string{"id", "from", "to", "port", "protocol", "desc"}
	policyColumnsWithoutDefault = []string{"from", "to", "port"}
	policyColumnsWithDefault    = []string{"id", "protocol", "desc"}
	policyPrimaryKeyColumns     = []string{"id"}
	policyGeneratedColumns      = []string{"id"}
)

type (
	// PolicySlice is an alias for a slice of pointers to Policy.
	// This should almost always be used instead of []Policy.
	PolicySlice []*Policy
	// PolicyHook is the signature for custom Policy hook methods
	PolicyHook func(context.Context, boil.ContextExecutor, *Policy) error

	policyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	policyType                 = reflect.TypeOf(&Policy{})
	policyMapping              = queries.MakeStructMapping(policyType)
	policyPrimaryKeyMapping, _ = queries.BindMapping(policyType, policyMapping, policyPrimaryKeyColumns)
	policyInsertCacheMut       sync.RWMutex
	policyInsertCache          = make(map[string]insertCache)
	policyUpdateCacheMut       sync.RWMutex
	policyUpdateCache          = make(map[string]updateCache)
	policyUpsertCacheMut       sync.RWMutex
	policyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var policyAfterSelectHooks []PolicyHook

var policyBeforeInsertHooks []PolicyHook
var policyAfterInsertHooks []PolicyHook

var policyBeforeUpdateHooks []PolicyHook
var policyAfterUpdateHooks []PolicyHook

var policyBeforeDeleteHooks []PolicyHook
var policyAfterDeleteHooks []PolicyHook

var policyBeforeUpsertHooks []PolicyHook
var policyAfterUpsertHooks []PolicyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Policy) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range policyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Policy) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range policyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Policy) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range policyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Policy) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range policyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Policy) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range policyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Policy) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range policyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Policy) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range policyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Policy) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range policyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Policy) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range policyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPolicyHook registers your hook function for all future operations.
func AddPolicyHook(hookPoint boil.HookPoint, policyHook PolicyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		policyAfterSelectHooks = append(policyAfterSelectHooks, policyHook)
	case boil.BeforeInsertHook:
		policyBeforeInsertHooks = append(policyBeforeInsertHooks, policyHook)
	case boil.AfterInsertHook:
		policyAfterInsertHooks = append(policyAfterInsertHooks, policyHook)
	case boil.BeforeUpdateHook:
		policyBeforeUpdateHooks = append(policyBeforeUpdateHooks, policyHook)
	case boil.AfterUpdateHook:
		policyAfterUpdateHooks = append(policyAfterUpdateHooks, policyHook)
	case boil.BeforeDeleteHook:
		policyBeforeDeleteHooks = append(policyBeforeDeleteHooks, policyHook)
	case boil.AfterDeleteHook:
		policyAfterDeleteHooks = append(policyAfterDeleteHooks, policyHook)
	case boil.BeforeUpsertHook:
		policyBeforeUpsertHooks = append(policyBeforeUpsertHooks, policyHook)
	case boil.AfterUpsertHook:
		policyAfterUpsertHooks = append(policyAfterUpsertHooks, policyHook)
	}
}

// One returns a single policy record from the query.
func (q policyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Policy, error) {
	o := &Policy{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for policy")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Policy records from the query.
func (q policyQuery) All(ctx context.Context, exec boil.ContextExecutor) (PolicySlice, error) {
	var o []*Policy

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Policy slice")
	}

	if len(policyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Policy records in the query.
func (q policyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count policy rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q policyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if policy exists")
	}

	return count > 0, nil
}

// ToSgroup pointed to by the foreign key.
func (o *Policy) ToSgroup(mods ...qm.QueryMod) sgroupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.To),
	}

	queryMods = append(queryMods, mods...)

	return Sgroups(queryMods...)
}

// FromSgroup pointed to by the foreign key.
func (o *Policy) FromSgroup(mods ...qm.QueryMod) sgroupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.From),
	}

	queryMods = append(queryMods, mods...)

	return Sgroups(queryMods...)
}

// LoadToSgroup allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (policyL) LoadToSgroup(ctx context.Context, e boil.ContextExecutor, singular bool, maybePolicy interface{}, mods queries.Applicator) error {
	var slice []*Policy
	var object *Policy

	if singular {
		var ok bool
		object, ok = maybePolicy.(*Policy)
		if !ok {
			object = new(Policy)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePolicy)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePolicy))
			}
		}
	} else {
		s, ok := maybePolicy.(*[]*Policy)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePolicy)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePolicy))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &policyR{}
		}
		if !queries.IsNil(object.To) {
			args = append(args, object.To)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &policyR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.To) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.To) {
				args = append(args, obj.To)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sgroup`),
		qm.WhereIn(`sgroup.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Sgroup")
	}

	var resultSlice []*Sgroup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Sgroup")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sgroup")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sgroup")
	}

	if len(sgroupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ToSgroup = foreign
		if foreign.R == nil {
			foreign.R = &sgroupR{}
		}
		foreign.R.ToPolicies = append(foreign.R.ToPolicies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.To, foreign.ID) {
				local.R.ToSgroup = foreign
				if foreign.R == nil {
					foreign.R = &sgroupR{}
				}
				foreign.R.ToPolicies = append(foreign.R.ToPolicies, local)
				break
			}
		}
	}

	return nil
}

// LoadFromSgroup allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (policyL) LoadFromSgroup(ctx context.Context, e boil.ContextExecutor, singular bool, maybePolicy interface{}, mods queries.Applicator) error {
	var slice []*Policy
	var object *Policy

	if singular {
		var ok bool
		object, ok = maybePolicy.(*Policy)
		if !ok {
			object = new(Policy)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePolicy)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePolicy))
			}
		}
	} else {
		s, ok := maybePolicy.(*[]*Policy)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePolicy)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePolicy))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &policyR{}
		}
		if !queries.IsNil(object.From) {
			args = append(args, object.From)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &policyR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.From) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.From) {
				args = append(args, obj.From)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sgroup`),
		qm.WhereIn(`sgroup.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Sgroup")
	}

	var resultSlice []*Sgroup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Sgroup")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sgroup")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sgroup")
	}

	if len(sgroupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FromSgroup = foreign
		if foreign.R == nil {
			foreign.R = &sgroupR{}
		}
		foreign.R.FromPolicies = append(foreign.R.FromPolicies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.From, foreign.ID) {
				local.R.FromSgroup = foreign
				if foreign.R == nil {
					foreign.R = &sgroupR{}
				}
				foreign.R.FromPolicies = append(foreign.R.FromPolicies, local)
				break
			}
		}
	}

	return nil
}

// SetToSgroup of the policy to the related item.
// Sets o.R.ToSgroup to related.
// Adds o to related.R.ToPolicies.
func (o *Policy) SetToSgroup(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Sgroup) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"policy\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"to"}),
		strmangle.WhereClause("\"", "\"", 0, policyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.To, related.ID)
	if o.R == nil {
		o.R = &policyR{
			ToSgroup: related,
		}
	} else {
		o.R.ToSgroup = related
	}

	if related.R == nil {
		related.R = &sgroupR{
			ToPolicies: PolicySlice{o},
		}
	} else {
		related.R.ToPolicies = append(related.R.ToPolicies, o)
	}

	return nil
}

// SetFromSgroup of the policy to the related item.
// Sets o.R.FromSgroup to related.
// Adds o to related.R.FromPolicies.
func (o *Policy) SetFromSgroup(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Sgroup) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"policy\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"from"}),
		strmangle.WhereClause("\"", "\"", 0, policyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.From, related.ID)
	if o.R == nil {
		o.R = &policyR{
			FromSgroup: related,
		}
	} else {
		o.R.FromSgroup = related
	}

	if related.R == nil {
		related.R = &sgroupR{
			FromPolicies: PolicySlice{o},
		}
	} else {
		related.R.FromPolicies = append(related.R.FromPolicies, o)
	}

	return nil
}

// Policies retrieves all the records using an executor.
func Policies(mods ...qm.QueryMod) policyQuery {
	mods = append(mods, qm.From("\"policy\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"policy\".*"})
	}

	return policyQuery{q}
}

// FindPolicy retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPolicy(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*Policy, error) {
	policyObj := &Policy{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"policy\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, policyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from policy")
	}

	if err = policyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return policyObj, err
	}

	return policyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Policy) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no policy provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(policyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	policyInsertCacheMut.RLock()
	cache, cached := policyInsertCache[key]
	policyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			policyAllColumns,
			policyColumnsWithDefault,
			policyColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, policyGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(policyType, policyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(policyType, policyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"policy\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"policy\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into policy")
	}

	if !cached {
		policyInsertCacheMut.Lock()
		policyInsertCache[key] = cache
		policyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Policy.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Policy) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	policyUpdateCacheMut.RLock()
	cache, cached := policyUpdateCache[key]
	policyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			policyAllColumns,
			policyPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, policyGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update policy, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"policy\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, policyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(policyType, policyMapping, append(wl, policyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update policy row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for policy")
	}

	if !cached {
		policyUpdateCacheMut.Lock()
		policyUpdateCache[key] = cache
		policyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q policyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for policy")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for policy")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PolicySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), policyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"policy\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, policyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in policy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all policy")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Policy) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no policy provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(policyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	policyUpsertCacheMut.RLock()
	cache, cached := policyUpsertCache[key]
	policyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			policyAllColumns,
			policyColumnsWithDefault,
			policyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			policyAllColumns,
			policyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert policy, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(policyPrimaryKeyColumns))
			copy(conflict, policyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"policy\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(policyType, policyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(policyType, policyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert policy")
	}

	if !cached {
		policyUpsertCacheMut.Lock()
		policyUpsertCache[key] = cache
		policyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Policy record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Policy) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Policy provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), policyPrimaryKeyMapping)
	sql := "DELETE FROM \"policy\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from policy")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for policy")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q policyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no policyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from policy")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for policy")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PolicySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(policyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), policyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"policy\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, policyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from policy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for policy")
	}

	if len(policyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Policy) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPolicy(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PolicySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PolicySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), policyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"policy\".* FROM \"policy\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, policyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PolicySlice")
	}

	*o = slice

	return nil
}

// PolicyExists checks if the Policy row exists.
func PolicyExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"policy\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if policy exists")
	}

	return exists, nil
}

// Exists checks if the Policy row exists.
func (o *Policy) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PolicyExists(ctx, exec, o.ID)
}
