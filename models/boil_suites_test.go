// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Hosts", testHosts)
	t.Run("Policies", testPolicies)
	t.Run("Sgroups", testSgroups)
}

func TestDelete(t *testing.T) {
	t.Run("Hosts", testHostsDelete)
	t.Run("Policies", testPoliciesDelete)
	t.Run("Sgroups", testSgroupsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Hosts", testHostsQueryDeleteAll)
	t.Run("Policies", testPoliciesQueryDeleteAll)
	t.Run("Sgroups", testSgroupsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Hosts", testHostsSliceDeleteAll)
	t.Run("Policies", testPoliciesSliceDeleteAll)
	t.Run("Sgroups", testSgroupsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Hosts", testHostsExists)
	t.Run("Policies", testPoliciesExists)
	t.Run("Sgroups", testSgroupsExists)
}

func TestFind(t *testing.T) {
	t.Run("Hosts", testHostsFind)
	t.Run("Policies", testPoliciesFind)
	t.Run("Sgroups", testSgroupsFind)
}

func TestBind(t *testing.T) {
	t.Run("Hosts", testHostsBind)
	t.Run("Policies", testPoliciesBind)
	t.Run("Sgroups", testSgroupsBind)
}

func TestOne(t *testing.T) {
	t.Run("Hosts", testHostsOne)
	t.Run("Policies", testPoliciesOne)
	t.Run("Sgroups", testSgroupsOne)
}

func TestAll(t *testing.T) {
	t.Run("Hosts", testHostsAll)
	t.Run("Policies", testPoliciesAll)
	t.Run("Sgroups", testSgroupsAll)
}

func TestCount(t *testing.T) {
	t.Run("Hosts", testHostsCount)
	t.Run("Policies", testPoliciesCount)
	t.Run("Sgroups", testSgroupsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Hosts", testHostsHooks)
	t.Run("Policies", testPoliciesHooks)
	t.Run("Sgroups", testSgroupsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Hosts", testHostsInsert)
	t.Run("Hosts", testHostsInsertWhitelist)
	t.Run("Policies", testPoliciesInsert)
	t.Run("Policies", testPoliciesInsertWhitelist)
	t.Run("Sgroups", testSgroupsInsert)
	t.Run("Sgroups", testSgroupsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("PolicyToSgroupUsingToSgroup", testPolicyToOneSgroupUsingToSgroup)
	t.Run("PolicyToSgroupUsingFromSgroup", testPolicyToOneSgroupUsingFromSgroup)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("HostToSgroups", testHostToManySgroups)
	t.Run("SgroupToHosts", testSgroupToManyHosts)
	t.Run("SgroupToToPolicies", testSgroupToManyToPolicies)
	t.Run("SgroupToFromPolicies", testSgroupToManyFromPolicies)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("PolicyToSgroupUsingToPolicies", testPolicyToOneSetOpSgroupUsingToSgroup)
	t.Run("PolicyToSgroupUsingFromPolicies", testPolicyToOneSetOpSgroupUsingFromSgroup)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("HostToSgroups", testHostToManyAddOpSgroups)
	t.Run("SgroupToHosts", testSgroupToManyAddOpHosts)
	t.Run("SgroupToToPolicies", testSgroupToManyAddOpToPolicies)
	t.Run("SgroupToFromPolicies", testSgroupToManyAddOpFromPolicies)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("HostToSgroups", testHostToManySetOpSgroups)
	t.Run("SgroupToHosts", testSgroupToManySetOpHosts)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("HostToSgroups", testHostToManyRemoveOpSgroups)
	t.Run("SgroupToHosts", testSgroupToManyRemoveOpHosts)
}

func TestReload(t *testing.T) {
	t.Run("Hosts", testHostsReload)
	t.Run("Policies", testPoliciesReload)
	t.Run("Sgroups", testSgroupsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Hosts", testHostsReloadAll)
	t.Run("Policies", testPoliciesReloadAll)
	t.Run("Sgroups", testSgroupsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Hosts", testHostsSelect)
	t.Run("Policies", testPoliciesSelect)
	t.Run("Sgroups", testSgroupsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Hosts", testHostsUpdate)
	t.Run("Policies", testPoliciesUpdate)
	t.Run("Sgroups", testSgroupsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Hosts", testHostsSliceUpdateAll)
	t.Run("Policies", testPoliciesSliceUpdateAll)
	t.Run("Sgroups", testSgroupsSliceUpdateAll)
}
