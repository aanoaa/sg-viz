// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Sgroup is an object representing the database table.
type Sgroup struct {
	ID     int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name   string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Ipaddr string `boil:"ipaddr" json:"ipaddr" toml:"ipaddr" yaml:"ipaddr"`
	Zone   string `boil:"zone" json:"zone" toml:"zone" yaml:"zone"`
	Desc   string `boil:"desc" json:"desc" toml:"desc" yaml:"desc"`

	R *sgroupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sgroupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SgroupColumns = struct {
	ID     string
	Name   string
	Ipaddr string
	Zone   string
	Desc   string
}{
	ID:     "id",
	Name:   "name",
	Ipaddr: "ipaddr",
	Zone:   "zone",
	Desc:   "desc",
}

var SgroupTableColumns = struct {
	ID     string
	Name   string
	Ipaddr string
	Zone   string
	Desc   string
}{
	ID:     "sgroup.id",
	Name:   "sgroup.name",
	Ipaddr: "sgroup.ipaddr",
	Zone:   "sgroup.zone",
	Desc:   "sgroup.desc",
}

// Generated where

var SgroupWhere = struct {
	ID     whereHelperint64
	Name   whereHelperstring
	Ipaddr whereHelperstring
	Zone   whereHelperstring
	Desc   whereHelperstring
}{
	ID:     whereHelperint64{field: "\"sgroup\".\"id\""},
	Name:   whereHelperstring{field: "\"sgroup\".\"name\""},
	Ipaddr: whereHelperstring{field: "\"sgroup\".\"ipaddr\""},
	Zone:   whereHelperstring{field: "\"sgroup\".\"zone\""},
	Desc:   whereHelperstring{field: "\"sgroup\".\"desc\""},
}

// SgroupRels is where relationship names are stored.
var SgroupRels = struct {
}{}

// sgroupR is where relationships are stored.
type sgroupR struct {
}

// NewStruct creates a new relationship struct
func (*sgroupR) NewStruct() *sgroupR {
	return &sgroupR{}
}

// sgroupL is where Load methods for each relationship are stored.
type sgroupL struct{}

var (
	sgroupAllColumns            = []string{"id", "name", "ipaddr", "zone", "desc"}
	sgroupColumnsWithoutDefault = []string{"name"}
	sgroupColumnsWithDefault    = []string{"id", "ipaddr", "zone", "desc"}
	sgroupPrimaryKeyColumns     = []string{"id"}
	sgroupGeneratedColumns      = []string{"id"}
)

type (
	// SgroupSlice is an alias for a slice of pointers to Sgroup.
	// This should almost always be used instead of []Sgroup.
	SgroupSlice []*Sgroup
	// SgroupHook is the signature for custom Sgroup hook methods
	SgroupHook func(context.Context, boil.ContextExecutor, *Sgroup) error

	sgroupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sgroupType                 = reflect.TypeOf(&Sgroup{})
	sgroupMapping              = queries.MakeStructMapping(sgroupType)
	sgroupPrimaryKeyMapping, _ = queries.BindMapping(sgroupType, sgroupMapping, sgroupPrimaryKeyColumns)
	sgroupInsertCacheMut       sync.RWMutex
	sgroupInsertCache          = make(map[string]insertCache)
	sgroupUpdateCacheMut       sync.RWMutex
	sgroupUpdateCache          = make(map[string]updateCache)
	sgroupUpsertCacheMut       sync.RWMutex
	sgroupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sgroupAfterSelectHooks []SgroupHook

var sgroupBeforeInsertHooks []SgroupHook
var sgroupAfterInsertHooks []SgroupHook

var sgroupBeforeUpdateHooks []SgroupHook
var sgroupAfterUpdateHooks []SgroupHook

var sgroupBeforeDeleteHooks []SgroupHook
var sgroupAfterDeleteHooks []SgroupHook

var sgroupBeforeUpsertHooks []SgroupHook
var sgroupAfterUpsertHooks []SgroupHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Sgroup) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sgroupAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Sgroup) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sgroupBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Sgroup) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sgroupAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Sgroup) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sgroupBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Sgroup) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sgroupAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Sgroup) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sgroupBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Sgroup) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sgroupAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Sgroup) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sgroupBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Sgroup) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sgroupAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSgroupHook registers your hook function for all future operations.
func AddSgroupHook(hookPoint boil.HookPoint, sgroupHook SgroupHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sgroupAfterSelectHooks = append(sgroupAfterSelectHooks, sgroupHook)
	case boil.BeforeInsertHook:
		sgroupBeforeInsertHooks = append(sgroupBeforeInsertHooks, sgroupHook)
	case boil.AfterInsertHook:
		sgroupAfterInsertHooks = append(sgroupAfterInsertHooks, sgroupHook)
	case boil.BeforeUpdateHook:
		sgroupBeforeUpdateHooks = append(sgroupBeforeUpdateHooks, sgroupHook)
	case boil.AfterUpdateHook:
		sgroupAfterUpdateHooks = append(sgroupAfterUpdateHooks, sgroupHook)
	case boil.BeforeDeleteHook:
		sgroupBeforeDeleteHooks = append(sgroupBeforeDeleteHooks, sgroupHook)
	case boil.AfterDeleteHook:
		sgroupAfterDeleteHooks = append(sgroupAfterDeleteHooks, sgroupHook)
	case boil.BeforeUpsertHook:
		sgroupBeforeUpsertHooks = append(sgroupBeforeUpsertHooks, sgroupHook)
	case boil.AfterUpsertHook:
		sgroupAfterUpsertHooks = append(sgroupAfterUpsertHooks, sgroupHook)
	}
}

// One returns a single sgroup record from the query.
func (q sgroupQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Sgroup, error) {
	o := &Sgroup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sgroup")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Sgroup records from the query.
func (q sgroupQuery) All(ctx context.Context, exec boil.ContextExecutor) (SgroupSlice, error) {
	var o []*Sgroup

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Sgroup slice")
	}

	if len(sgroupAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Sgroup records in the query.
func (q sgroupQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sgroup rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sgroupQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sgroup exists")
	}

	return count > 0, nil
}

// Sgroups retrieves all the records using an executor.
func Sgroups(mods ...qm.QueryMod) sgroupQuery {
	mods = append(mods, qm.From("\"sgroup\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sgroup\".*"})
	}

	return sgroupQuery{q}
}

// FindSgroup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSgroup(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Sgroup, error) {
	sgroupObj := &Sgroup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sgroup\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, sgroupObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sgroup")
	}

	if err = sgroupObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sgroupObj, err
	}

	return sgroupObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Sgroup) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sgroup provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sgroupColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sgroupInsertCacheMut.RLock()
	cache, cached := sgroupInsertCache[key]
	sgroupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sgroupAllColumns,
			sgroupColumnsWithDefault,
			sgroupColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, sgroupGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(sgroupType, sgroupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sgroupType, sgroupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sgroup\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sgroup\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sgroup")
	}

	if !cached {
		sgroupInsertCacheMut.Lock()
		sgroupInsertCache[key] = cache
		sgroupInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Sgroup.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Sgroup) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sgroupUpdateCacheMut.RLock()
	cache, cached := sgroupUpdateCache[key]
	sgroupUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sgroupAllColumns,
			sgroupPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, sgroupGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sgroup, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sgroup\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, sgroupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sgroupType, sgroupMapping, append(wl, sgroupPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sgroup row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sgroup")
	}

	if !cached {
		sgroupUpdateCacheMut.Lock()
		sgroupUpdateCache[key] = cache
		sgroupUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sgroupQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sgroup")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sgroup")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SgroupSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sgroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sgroup\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sgroupPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sgroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sgroup")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Sgroup) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sgroup provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sgroupColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sgroupUpsertCacheMut.RLock()
	cache, cached := sgroupUpsertCache[key]
	sgroupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sgroupAllColumns,
			sgroupColumnsWithDefault,
			sgroupColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sgroupAllColumns,
			sgroupPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert sgroup, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(sgroupPrimaryKeyColumns))
			copy(conflict, sgroupPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"sgroup\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(sgroupType, sgroupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sgroupType, sgroupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert sgroup")
	}

	if !cached {
		sgroupUpsertCacheMut.Lock()
		sgroupUpsertCache[key] = cache
		sgroupUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Sgroup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Sgroup) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Sgroup provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sgroupPrimaryKeyMapping)
	sql := "DELETE FROM \"sgroup\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sgroup")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sgroup")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sgroupQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sgroupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sgroup")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sgroup")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SgroupSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sgroupBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sgroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sgroup\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sgroupPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sgroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sgroup")
	}

	if len(sgroupAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Sgroup) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSgroup(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SgroupSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SgroupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sgroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sgroup\".* FROM \"sgroup\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sgroupPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SgroupSlice")
	}

	*o = slice

	return nil
}

// SgroupExists checks if the Sgroup row exists.
func SgroupExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sgroup\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sgroup exists")
	}

	return exists, nil
}

// Exists checks if the Sgroup row exists.
func (o *Sgroup) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SgroupExists(ctx, exec, o.ID)
}
